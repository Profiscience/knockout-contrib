import * as fs from 'fs'
import * as path from 'path'
import { promisify as pify } from 'util'
import { camelCase } from 'lodash'
import chalk from 'chalk'

// tslint:disable no-var-requires
const { dependencies } = require(path.resolve(__dirname, '../package.json'))

const readdir = pify(fs.readdir)
const writeFile = pify(fs.writeFile)

const AUTOGEN_BANNER = `
/**
 * THIS IS AN AUTOGENERATED FILE
 */
`

async function getComponentPackages(): Promise<{ [k: string]: { name: string } }> {
  const prefix = 'observable.fn.'
  return (await readdir(path.resolve(__dirname, '../..')))
    .filter((d) => d.indexOf(prefix) === 0)
    .map((d) => d.replace(prefix, ''))
    .reduce((pkgs, name) => {
      const pkg = require(path.resolve(__dirname, `../../observable.fn.${name}/package.json`))
      if (!dependencies[pkg.name]) {
        // tslint:disable-next-line no-console max-line-length
        console.warn(chalk.yellow(`observable.fn.${name} not listed as dependency of observable.fn metapackage. Did you forget to add it to observable.fn/package.json?`))
        return pkgs
      } else {
        return {
          ...pkgs,
          [name]: pkg
        }
      }
    }, {})
}

async function generateGitIgnore(packages: { [k: string]: any }) {
  const names = Object.keys(packages)
  const contents = names.reduce((accum, n) => [
    ...accum,
    `${n}.ts`
  ], [
    '*.js',
    '*.d.ts',
    'index.ts'
  ]).join('\n')
  await writeFile(path.resolve(__dirname, '../.gitignore'), contents)
}

async function generateIndex(packages: { [k: string]: any }) {
  const names = Object.keys(packages)
  const contents = [
    AUTOGEN_BANNER,
    ...names.map((p) => `import './${p}'`)
  ].join('\n') + '\n'
  await writeFile(path.resolve(__dirname, '../index.ts'), contents)
}

async function generateIndividual(name: string, pkg: { name: string }) {
  const contents = [
    AUTOGEN_BANNER,
    `import '${pkg.name}'`
  ].join('\n') + '\n'
  await writeFile(path.resolve(__dirname, `../${name}.ts`), contents)
}

getComponentPackages()
  .then((packages) => {
    generateGitIgnore(packages)
    generateIndex(packages)
    Object.keys(packages).forEach((k) => generateIndividual(k, packages[k]))
  })
