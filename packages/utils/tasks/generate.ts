import * as fs from 'fs'
import * as path from 'path'
import { promisify as pify } from 'util'
import { camelCase } from 'lodash'
import chalk from 'chalk'

// tslint:disable no-var-requires
const { dependencies } = require(path.resolve(__dirname, '../package.json'))

const readdir = pify(fs.readdir)
const writeFile = pify(fs.writeFile)

const AUTOGEN_BANNER = `
/**
 * THIS IS AN AUTOGENERATED FILE
 */
`

async function getUtilPackages(): Promise<{ [k: string]: { name: string } }> {
  const prefix = 'utils.'
  return (await readdir(path.resolve(__dirname, '../..')))
    .filter((d) => d.indexOf(prefix) === 0)
    .map((d) => d.replace(prefix, ''))
    .reduce((pkgs, name) => {
      const pkg = require(path.resolve(__dirname, `../../utils.${name}/package.json`))
      if (!dependencies[pkg.name]) {
        // tslint:disable-next-line no-console max-line-length
        console.warn(chalk.yellow(`${name} utility not listed as dependency of utils metapackage. Did you forget to add it to utils/package.json?`))
        return pkgs
      } else {
        return {
          ...pkgs,
          [name]: pkg
        }
      }
    }, {})
}

async function generateIndex(packages: { [k: string]: any }) {
  const names = Object.keys(packages)
  const contents = [
    AUTOGEN_BANNER,
    ...names.map((p) => `export * from '${packages[p].name}'`)
  ].join('\n') + '\n'
  await writeFile(path.resolve(__dirname, '../index.ts'), contents)
}

getUtilPackages().then(generateIndex)
